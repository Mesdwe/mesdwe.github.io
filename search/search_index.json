{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"TheVault/","text":"Welcome I'm starting The Hub! Here you can find the process of my learning - probably dirty and ugly, I'm just starting! Start from here","title":"Welcome"},{"location":"TheVault/#welcome","text":"I'm starting The Hub! Here you can find the process of my learning - probably dirty and ugly, I'm just starting! Start from here","title":"Welcome"},{"location":"TheVault/Content/","text":"","title":"Content"},{"location":"TheVault/Timetable/","text":"\u7b2c\u4e00\u9636\u6bb5\uff0828/02-27/03\uff09\uff1a\u57fa\u7840\u5f3a\u5316 + \u6295\u9012 + \u9762\u8bd5\u51c6\u5907 \u5468\u4e00\u81f3\u5468\u4e94\uff08\u5de5\u4f5c\u65e5\u5b89\u6392\uff09 \u65f6\u95f4 \u8ba1\u5212 \u8bf4\u660e 08:30 - 09:00 \u6668\u95f4\u89c4\u5212 & \u9605\u8bfb\u6280\u672f\u535a\u5ba2 \u786e\u5b9a\u5f53\u5929\u91cd\u70b9\uff0c\u770b\u770b\u6280\u672f\u535a\u5ba2\uff08UE5\u3001C++ \u6587\u7ae0\uff09 09:00 - 11:30 \u6280\u672f\u5b66\u4e60\uff08C++ & UE5 \u8fdb\u9636\uff09 \u5b66\u4e60 Effective C++ / Modern C++\uff0c\u5e76\u505a\u7b14\u8bb0 11:30 - 12:30 \u6c42\u804c\u76f8\u5173\uff08\u6295\u9012 / \u516c\u53f8\u7814\u7a76\uff09 \u6295\u9012\u7b80\u5386\u3001\u627e\u62db\u8058\u4fe1\u606f\u3001\u8054\u7cfb\u5185\u63a8 14:00 - 16:00 \u9762\u8bd5\u51c6\u5907\uff08\u5237\u9898 / \u7ec3\u4e60\u7cfb\u7edf\u8bbe\u8ba1\uff09 \u7ec3\u4e60 Leetcode / \u7b97\u6cd5\u8bbe\u8ba1 / UE5 \u7cfb\u7edf\u8bbe\u8ba1 16:00 - 18:00 \u4e2a\u4eba\u9879\u76ee\uff08\u5c0f\u800c\u7cbe\uff09 UE5 Editor \u5de5\u5177 / \u7f13\u5b58\u7b56\u7565 / \u5bf9\u8c61\u6c60\u5f00\u53d1 19:30 - 21:30 \u9762\u8bd5 / \u9762\u8bd5\u590d\u76d8 \u5982\u679c\u6709\u9762\u8bd5\uff0c\u53c2\u52a0\u9762\u8bd5\u5e76\u590d\u76d8\uff1b\u6ca1\u6709\u5c31\u7ee7\u7eed\u6280\u672f\u63d0\u5347 21:30 - 22:30 Game Jam \u5f00\u53d1 Road Trip \u4e3b\u9898 UE5 \u5f00\u53d1 22:30 - 23:00 \u603b\u7ed3 & \u660e\u65e5\u89c4\u5212 \u8bb0\u5f55\u5b66\u4e60 & \u9762\u8bd5\u6536\u83b7 \u5468\u516d\uff08\u590d\u76d8 & \u52a0\u5f3a\uff09 \u65f6\u95f4 \u8ba1\u5212 \u8bf4\u660e 09:00 - 10:30 \u9762\u8bd5\u9898\u590d\u76d8 \u590d\u76d8\u672c\u5468\u7684\u9762\u8bd5\u5185\u5bb9\uff0c\u6574\u7406\u7b14\u8bb0 10:30 - 12:30 \u6df1\u5165\u7814\u7a76\u4e00\u4e2a\u6280\u672f\u70b9 UE5 UI \u6e32\u67d3\u4f18\u5316 / C++ \u667a\u80fd\u6307\u9488 14:00 - 16:00 \u4e2a\u4eba\u9879\u76ee\u4f18\u5316 \u5bf9\u8c61\u6c60 / \u7f13\u5b58\u7b56\u7565\u9879\u76ee\u4f18\u5316 16:00 - 18:00 Leetcode & \u7cfb\u7edf\u8bbe\u8ba1 \u9ad8\u7ea7\u7b97\u6cd5 & \u8bbe\u8ba1\u6a21\u5f0f\u5b66\u4e60 19:30 - 22:00 game jam \u5f00\u53d1 \u4e3b\u8981\u5f00\u53d1\u548c\u8c03\u8bd5 \u5468\u65e5\uff08\u8f7b\u677e\u4f46\u9ad8\u6548\uff09 \u65f6\u95f4 \u8ba1\u5212 \u8bf4\u660e 10:00 - 12:00 \u5b66\u4e60+\u5199\u535a\u5ba2 \u628a\u6280\u672f\u7b14\u8bb0\u6574\u7406\u6210\u6587\u7ae0 14:00 - 16:00 \u9762\u8bd5\u6a21\u62df \u627e\u4eba mock interview \u6216\u8005\u81ea\u5df1\u7ec3\u4e60 16:00 - 18:00 Game Jam \u8fdb\u5ea6\u68c0\u67e5 \u8c03\u6574\u4efb\u52a1\u3001\u89e3\u51b3\u96be\u70b9 19:30 - 21:30 \u653e\u677e & \u590d\u76d8 \u770b\u6e38\u620f\u5f00\u53d1\u76f8\u5173\u89c6\u9891 / \u7814\u7a76\u884c\u4e1a\u8d8b\u52bf \u7b2c\u4e8c\u9636\u6bb5\uff0828/03-24/04\uff09\uff1a\u51b2\u523a\u9636\u6bb5\uff08\u66f4\u591a\u9762\u8bd5 & \u9879\u76ee\u5b8c\u5584\uff09 \u8fdb\u5165\u66f4\u591a \u6a21\u62df\u9762\u8bd5 & \u590d\u76d8\u9636\u6bb5 \uff0c\u51cf\u5c11\u65b0\u77e5\u8bc6\u7684\u8f93\u5165\uff0c\u4e3b\u8981\u662f\u590d\u4e60\u548c\u4f18\u5316\u3002 Game Jam \u8fdb\u5165\u51b2\u523a\uff0c\u4fdd\u8bc1\u80fd\u6709\u8f83\u5b8c\u6574\u7684 Demo \u4f5c\u4e3a Portfolio \u5c55\u793a\u3002 \u4e2a\u4eba\u9879\u76ee\u6536\u5c3e\uff0c\u4f18\u5316\u4ee3\u7801\u548c\u6587\u6863\uff0c\u8ba9\u5176\u53ef\u4ee5\u5728\u9762\u8bd5\u4e2d\u5c55\u793a\u3002 \u5468\u4e00\u81f3\u5468\u4e94 \u65f6\u95f4 \u8ba1\u5212 \u8bf4\u660e 08:30 - 09:00 \u6668\u95f4\u89c4\u5212 & \u884c\u4e1a\u7814\u7a76 \u7814\u7a76\u9762\u8bd5\u516c\u53f8\u80cc\u666f & \u6280\u672f 09:00 - 11:30 \u6a21\u62df\u9762\u8bd5 & \u4ee3\u7801\u590d\u76d8 \u81ea\u5df1\u7ec3\u4e60\u9762\u8bd5\uff0c\u6216\u627e\u4eba Mock Interview 11:30 - 12:30 \u6295\u9012 & \u7533\u8bf7\u9762\u8bd5 \u6301\u7eed\u7533\u8bf7\u65b0\u7684\u673a\u4f1a 14:00 - 16:00 \u9762\u8bd5 & \u590d\u76d8 \u771f\u5b9e\u9762\u8bd5 + \u8bb0\u5f55\u603b\u7ed3 16:00 - 18:00 \u4e2a\u4eba\u9879\u76ee\u4f18\u5316 \u4fee Bug / \u5199\u6280\u672f\u6587\u6863 19:30 - 21:30 Game Jam \u7ec8\u76d8\u4f18\u5316 \u786e\u4fdd\u9879\u76ee\u80fd\u5c55\u793a \u5c0f\u800c\u7cbe\u7684\u4e2a\u4eba\u9879\u76ee \u9879\u76ee\u65b9\u5411 \u5185\u5bb9 \u7528\u9014 Tools UE5 Editor \u5c0f\u5de5\u5177\uff08\u8d44\u6e90\u7ba1\u7406\uff09 \u589e\u5f3a Tools Programmer \u7ade\u4e89\u529b UI \u81ea\u5b9a\u4e49 Slate UI \u7ec4\u4ef6 \u589e\u5f3a UI Programmer \u7ade\u4e89\u529b \u901a\u7528\u7cfb\u7edf \u7f13\u5b58\u7b56\u7565 / \u5bf9\u8c61\u6c60 \u9002\u914d\u6e38\u620f & \u4e92\u8054\u7f51\u884c\u4e1a\u9700\u6c42","title":"Timetable"},{"location":"TheVault/Timetable/#2802-2703","text":"","title":"\u7b2c\u4e00\u9636\u6bb5\uff0828/02-27/03\uff09\uff1a\u57fa\u7840\u5f3a\u5316 + \u6295\u9012 + \u9762\u8bd5\u51c6\u5907"},{"location":"TheVault/Timetable/#_1","text":"\u65f6\u95f4 \u8ba1\u5212 \u8bf4\u660e 08:30 - 09:00 \u6668\u95f4\u89c4\u5212 & \u9605\u8bfb\u6280\u672f\u535a\u5ba2 \u786e\u5b9a\u5f53\u5929\u91cd\u70b9\uff0c\u770b\u770b\u6280\u672f\u535a\u5ba2\uff08UE5\u3001C++ \u6587\u7ae0\uff09 09:00 - 11:30 \u6280\u672f\u5b66\u4e60\uff08C++ & UE5 \u8fdb\u9636\uff09 \u5b66\u4e60 Effective C++ / Modern C++\uff0c\u5e76\u505a\u7b14\u8bb0 11:30 - 12:30 \u6c42\u804c\u76f8\u5173\uff08\u6295\u9012 / \u516c\u53f8\u7814\u7a76\uff09 \u6295\u9012\u7b80\u5386\u3001\u627e\u62db\u8058\u4fe1\u606f\u3001\u8054\u7cfb\u5185\u63a8 14:00 - 16:00 \u9762\u8bd5\u51c6\u5907\uff08\u5237\u9898 / \u7ec3\u4e60\u7cfb\u7edf\u8bbe\u8ba1\uff09 \u7ec3\u4e60 Leetcode / \u7b97\u6cd5\u8bbe\u8ba1 / UE5 \u7cfb\u7edf\u8bbe\u8ba1 16:00 - 18:00 \u4e2a\u4eba\u9879\u76ee\uff08\u5c0f\u800c\u7cbe\uff09 UE5 Editor \u5de5\u5177 / \u7f13\u5b58\u7b56\u7565 / \u5bf9\u8c61\u6c60\u5f00\u53d1 19:30 - 21:30 \u9762\u8bd5 / \u9762\u8bd5\u590d\u76d8 \u5982\u679c\u6709\u9762\u8bd5\uff0c\u53c2\u52a0\u9762\u8bd5\u5e76\u590d\u76d8\uff1b\u6ca1\u6709\u5c31\u7ee7\u7eed\u6280\u672f\u63d0\u5347 21:30 - 22:30 Game Jam \u5f00\u53d1 Road Trip \u4e3b\u9898 UE5 \u5f00\u53d1 22:30 - 23:00 \u603b\u7ed3 & \u660e\u65e5\u89c4\u5212 \u8bb0\u5f55\u5b66\u4e60 & \u9762\u8bd5\u6536\u83b7","title":"\u5468\u4e00\u81f3\u5468\u4e94\uff08\u5de5\u4f5c\u65e5\u5b89\u6392\uff09"},{"location":"TheVault/Timetable/#_2","text":"\u65f6\u95f4 \u8ba1\u5212 \u8bf4\u660e 09:00 - 10:30 \u9762\u8bd5\u9898\u590d\u76d8 \u590d\u76d8\u672c\u5468\u7684\u9762\u8bd5\u5185\u5bb9\uff0c\u6574\u7406\u7b14\u8bb0 10:30 - 12:30 \u6df1\u5165\u7814\u7a76\u4e00\u4e2a\u6280\u672f\u70b9 UE5 UI \u6e32\u67d3\u4f18\u5316 / C++ \u667a\u80fd\u6307\u9488 14:00 - 16:00 \u4e2a\u4eba\u9879\u76ee\u4f18\u5316 \u5bf9\u8c61\u6c60 / \u7f13\u5b58\u7b56\u7565\u9879\u76ee\u4f18\u5316 16:00 - 18:00 Leetcode & \u7cfb\u7edf\u8bbe\u8ba1 \u9ad8\u7ea7\u7b97\u6cd5 & \u8bbe\u8ba1\u6a21\u5f0f\u5b66\u4e60 19:30 - 22:00 game jam \u5f00\u53d1 \u4e3b\u8981\u5f00\u53d1\u548c\u8c03\u8bd5","title":"\u5468\u516d\uff08\u590d\u76d8 &amp; \u52a0\u5f3a\uff09"},{"location":"TheVault/Timetable/#_3","text":"\u65f6\u95f4 \u8ba1\u5212 \u8bf4\u660e 10:00 - 12:00 \u5b66\u4e60+\u5199\u535a\u5ba2 \u628a\u6280\u672f\u7b14\u8bb0\u6574\u7406\u6210\u6587\u7ae0 14:00 - 16:00 \u9762\u8bd5\u6a21\u62df \u627e\u4eba mock interview \u6216\u8005\u81ea\u5df1\u7ec3\u4e60 16:00 - 18:00 Game Jam \u8fdb\u5ea6\u68c0\u67e5 \u8c03\u6574\u4efb\u52a1\u3001\u89e3\u51b3\u96be\u70b9 19:30 - 21:30 \u653e\u677e & \u590d\u76d8 \u770b\u6e38\u620f\u5f00\u53d1\u76f8\u5173\u89c6\u9891 / \u7814\u7a76\u884c\u4e1a\u8d8b\u52bf","title":"\u5468\u65e5\uff08\u8f7b\u677e\u4f46\u9ad8\u6548\uff09"},{"location":"TheVault/Timetable/#2803-2404","text":"\u8fdb\u5165\u66f4\u591a \u6a21\u62df\u9762\u8bd5 & \u590d\u76d8\u9636\u6bb5 \uff0c\u51cf\u5c11\u65b0\u77e5\u8bc6\u7684\u8f93\u5165\uff0c\u4e3b\u8981\u662f\u590d\u4e60\u548c\u4f18\u5316\u3002 Game Jam \u8fdb\u5165\u51b2\u523a\uff0c\u4fdd\u8bc1\u80fd\u6709\u8f83\u5b8c\u6574\u7684 Demo \u4f5c\u4e3a Portfolio \u5c55\u793a\u3002 \u4e2a\u4eba\u9879\u76ee\u6536\u5c3e\uff0c\u4f18\u5316\u4ee3\u7801\u548c\u6587\u6863\uff0c\u8ba9\u5176\u53ef\u4ee5\u5728\u9762\u8bd5\u4e2d\u5c55\u793a\u3002","title":"\u7b2c\u4e8c\u9636\u6bb5\uff0828/03-24/04\uff09\uff1a\u51b2\u523a\u9636\u6bb5\uff08\u66f4\u591a\u9762\u8bd5 &amp; \u9879\u76ee\u5b8c\u5584\uff09"},{"location":"TheVault/Timetable/#_4","text":"\u65f6\u95f4 \u8ba1\u5212 \u8bf4\u660e 08:30 - 09:00 \u6668\u95f4\u89c4\u5212 & \u884c\u4e1a\u7814\u7a76 \u7814\u7a76\u9762\u8bd5\u516c\u53f8\u80cc\u666f & \u6280\u672f 09:00 - 11:30 \u6a21\u62df\u9762\u8bd5 & \u4ee3\u7801\u590d\u76d8 \u81ea\u5df1\u7ec3\u4e60\u9762\u8bd5\uff0c\u6216\u627e\u4eba Mock Interview 11:30 - 12:30 \u6295\u9012 & \u7533\u8bf7\u9762\u8bd5 \u6301\u7eed\u7533\u8bf7\u65b0\u7684\u673a\u4f1a 14:00 - 16:00 \u9762\u8bd5 & \u590d\u76d8 \u771f\u5b9e\u9762\u8bd5 + \u8bb0\u5f55\u603b\u7ed3 16:00 - 18:00 \u4e2a\u4eba\u9879\u76ee\u4f18\u5316 \u4fee Bug / \u5199\u6280\u672f\u6587\u6863 19:30 - 21:30 Game Jam \u7ec8\u76d8\u4f18\u5316 \u786e\u4fdd\u9879\u76ee\u80fd\u5c55\u793a","title":"\u5468\u4e00\u81f3\u5468\u4e94"},{"location":"TheVault/Timetable/#_5","text":"\u9879\u76ee\u65b9\u5411 \u5185\u5bb9 \u7528\u9014 Tools UE5 Editor \u5c0f\u5de5\u5177\uff08\u8d44\u6e90\u7ba1\u7406\uff09 \u589e\u5f3a Tools Programmer \u7ade\u4e89\u529b UI \u81ea\u5b9a\u4e49 Slate UI \u7ec4\u4ef6 \u589e\u5f3a UI Programmer \u7ade\u4e89\u529b \u901a\u7528\u7cfb\u7edf \u7f13\u5b58\u7b56\u7565 / \u5bf9\u8c61\u6c60 \u9002\u914d\u6e38\u620f & \u4e92\u8054\u7f51\u884c\u4e1a\u9700\u6c42","title":"\u5c0f\u800c\u7cbe\u7684\u4e2a\u4eba\u9879\u76ee"},{"location":"TheVault/C%2B%2B%20learning/C%2B%2B%20Projects/Cache%20Policies/","text":"LRU Least Recently Used LFU Least Frequently Used ARC Adaptive Replacement Cache","title":"Cache Policies"},{"location":"TheVault/C%2B%2B%20learning/C%2B%2B%20Projects/Cache%20Policies/#lru","text":"Least Recently Used","title":"LRU"},{"location":"TheVault/C%2B%2B%20learning/C%2B%2B%20Projects/Cache%20Policies/#lfu","text":"Least Frequently Used","title":"LFU"},{"location":"TheVault/C%2B%2B%20learning/C%2B%2B%20Projects/Cache%20Policies/#arc","text":"Adaptive Replacement Cache","title":"ARC"},{"location":"TheVault/C%2B%2B%20learning/Effective%20C%2B%2B/Effective%20C%2B%2B%20Chapter%202/","text":"Intro Understanding what happens when instantiating an object has always been difficult for me. Looking at some C++ quiz, I was like WTF, what does all these mean! This chapter has helped me a lot. So... To begin with, what does this mean? class Empty{}; If you ever put this class into use, you should not expect it to be empty. If you ever do the following things: Empty e1; // default constructor; desturctor Empty e2(e1); // copy constructor e2 = e1; // copy assignment operator Essentially, compilers will create something for you: class Empty{ public: inline Empty() {...} // default constructor inline Empty(const Empty& rhs) {...} // copy constructor inline ~Empty() {...} // destructor inline Empty& operator=(const Empty& rhs){...} // copy assignment operator }; Note: these functions are generated only if they are needed. So many questions come from these, let's take a deeper look into each type of function Constructor It there's no user-defined constructor, like explained above, the compiler will create a default constructor for you, it will be without parameters and without initializer list, plus a null body public: inline Empty() {} Destructor The default created destructor will not be virtual! This means if you have derived class and try to delete it via base class, it will only be partially deleted!! class Base {}; class Derived {}; Base* a = new Derived(); delete a; // undefined! ~Base() is not virtual, ~Derived() not called Virtual function Declare virtual function only when needed, because the extra overhead vptr and *vtbl. If a class has one or more virtual functions, instance of the class (object) will carry a virtual table pointer (vptr), that points to a virtual table (vtbl) contains an array of virtual function pointers. Each class with virtual functions has an associated vtbl. When a virtual function is called, it will determine which function to call by following the object's vptr to a vtbl. So object size will increase (for the extra pointer), and need extra time for searching. As conclusion, don't declare virtual function if the class is not designed for polymorphism. But if there's a virtual function declared, the destructor has to be virtual!!! Call Order General Rule: Base Constructor ->> Derived Constructor ->> Derived Destructor ->> Base Destructor This leads to a problem, you shouldn't call a virtual function inside constructors and destructors! The call will never go to a more derived class than the currently executing one. It seems reasonable: the derived constructor won't be called by then, therefore the child will not be constructed yet. And when destructing, derived object will already be destructed. Assignment Operators Remember to return * this Something& operator= (const Something& rhs) { ... return * this; } So it can be chained like this: x = y = z = 15; Handle operator= when assigned to self Copying functions should copy all of an object's data","title":"Effective C++ Chapter 2"},{"location":"TheVault/C%2B%2B%20learning/Effective%20C%2B%2B/Effective%20C%2B%2B%20Chapter%202/#intro","text":"Understanding what happens when instantiating an object has always been difficult for me. Looking at some C++ quiz, I was like WTF, what does all these mean! This chapter has helped me a lot. So... To begin with, what does this mean? class Empty{}; If you ever put this class into use, you should not expect it to be empty. If you ever do the following things: Empty e1; // default constructor; desturctor Empty e2(e1); // copy constructor e2 = e1; // copy assignment operator Essentially, compilers will create something for you: class Empty{ public: inline Empty() {...} // default constructor inline Empty(const Empty& rhs) {...} // copy constructor inline ~Empty() {...} // destructor inline Empty& operator=(const Empty& rhs){...} // copy assignment operator }; Note: these functions are generated only if they are needed. So many questions come from these, let's take a deeper look into each type of function","title":"Intro"},{"location":"TheVault/C%2B%2B%20learning/Effective%20C%2B%2B/Effective%20C%2B%2B%20Chapter%202/#constructor","text":"It there's no user-defined constructor, like explained above, the compiler will create a default constructor for you, it will be without parameters and without initializer list, plus a null body public: inline Empty() {}","title":"Constructor"},{"location":"TheVault/C%2B%2B%20learning/Effective%20C%2B%2B/Effective%20C%2B%2B%20Chapter%202/#destructor","text":"The default created destructor will not be virtual! This means if you have derived class and try to delete it via base class, it will only be partially deleted!! class Base {}; class Derived {}; Base* a = new Derived(); delete a; // undefined! ~Base() is not virtual, ~Derived() not called","title":"Destructor"},{"location":"TheVault/C%2B%2B%20learning/Effective%20C%2B%2B/Effective%20C%2B%2B%20Chapter%202/#virtual-function","text":"Declare virtual function only when needed, because the extra overhead vptr and *vtbl. If a class has one or more virtual functions, instance of the class (object) will carry a virtual table pointer (vptr), that points to a virtual table (vtbl) contains an array of virtual function pointers. Each class with virtual functions has an associated vtbl. When a virtual function is called, it will determine which function to call by following the object's vptr to a vtbl. So object size will increase (for the extra pointer), and need extra time for searching. As conclusion, don't declare virtual function if the class is not designed for polymorphism. But if there's a virtual function declared, the destructor has to be virtual!!!","title":"Virtual function"},{"location":"TheVault/C%2B%2B%20learning/Effective%20C%2B%2B/Effective%20C%2B%2B%20Chapter%202/#call-order","text":"General Rule: Base Constructor ->> Derived Constructor ->> Derived Destructor ->> Base Destructor This leads to a problem, you shouldn't call a virtual function inside constructors and destructors! The call will never go to a more derived class than the currently executing one. It seems reasonable: the derived constructor won't be called by then, therefore the child will not be constructed yet. And when destructing, derived object will already be destructed.","title":"Call Order"},{"location":"TheVault/C%2B%2B%20learning/Effective%20C%2B%2B/Effective%20C%2B%2B%20Chapter%202/#assignment-operators","text":"Remember to return * this Something& operator= (const Something& rhs) { ... return * this; } So it can be chained like this: x = y = z = 15;","title":"Assignment Operators"},{"location":"TheVault/C%2B%2B%20learning/Effective%20C%2B%2B/Effective%20C%2B%2B%20Chapter%202/#handle-operator-when-assigned-to-self","text":"","title":"Handle operator= when assigned to self"},{"location":"TheVault/C%2B%2B%20learning/Effective%20C%2B%2B/Effective%20C%2B%2B%20Chapter%202/#copying-functions-should-copy-all-of-an-objects-data","text":"","title":"Copying functions should copy all of an object's data"},{"location":"TheVault/C%2B%2B%20learning/Effective%20C%2B%2B/Effective%20C%2B%2B%20Chapter%203/","text":"RAII (Resource Acquisition Is Initialization) This chapter is about resource management, therefore RAII is a very important concept. RAII is a technique about resource management - acquires resources when constructed, and properly release them when destroyed. ![[Pasted image 20250306101433.png]] Generally you need RAII objects to wrap resources (e.g. pointers, mutexes) class RAII { public: RAII() { _something = new Something(); } ~RAII() { delete _something; } private: Something* _something; }; Use smart pointers can be good idea (TODO: write about smart pointers later) std::shared_pointer<Something> something; There are some pitfalls Copying RAII objects Be aware when copying. When doing shallow copy, if one resource is released first, the other one may be dangling / deadlock / ... mutex m; { Lock l1(&m); Lock l2(l1); } // l2 release first // what will happen to l2? You may prohibit copying if necessary class Uncopyable { private: inline Uncopyable(const Uncopyable&); inline Uncopyable& operator= (const Uncopyable&); }; class Something : private Uncopyable // TODO: write about why it's private { // content }; Or, implement reference count. Note that the default destructor of shared pointer is to delete resource, make it to unlock mutex if it's a lock. new, new[], delete, delete[] What does new do? 1. allocate memory 2. call one or more constructors If you have something like this: std::string* strings = new std::string[100]; Constructor of std::string will be called 100 times! Therefore you cannot use delete , that'll only delete one element (the first one). Instead, use delete[]. Always have new and delete matched. If there's a [] in new expression, use delete[]!!!","title":"Effective C++ Chapter 3"},{"location":"TheVault/C%2B%2B%20learning/Effective%20C%2B%2B/Effective%20C%2B%2B%20Chapter%203/#raii-resource-acquisition-is-initialization","text":"This chapter is about resource management, therefore RAII is a very important concept. RAII is a technique about resource management - acquires resources when constructed, and properly release them when destroyed. ![[Pasted image 20250306101433.png]] Generally you need RAII objects to wrap resources (e.g. pointers, mutexes) class RAII { public: RAII() { _something = new Something(); } ~RAII() { delete _something; } private: Something* _something; }; Use smart pointers can be good idea (TODO: write about smart pointers later) std::shared_pointer<Something> something; There are some pitfalls","title":"RAII (Resource Acquisition Is Initialization)"},{"location":"TheVault/C%2B%2B%20learning/Effective%20C%2B%2B/Effective%20C%2B%2B%20Chapter%203/#copying-raii-objects","text":"Be aware when copying. When doing shallow copy, if one resource is released first, the other one may be dangling / deadlock / ... mutex m; { Lock l1(&m); Lock l2(l1); } // l2 release first // what will happen to l2? You may prohibit copying if necessary class Uncopyable { private: inline Uncopyable(const Uncopyable&); inline Uncopyable& operator= (const Uncopyable&); }; class Something : private Uncopyable // TODO: write about why it's private { // content }; Or, implement reference count. Note that the default destructor of shared pointer is to delete resource, make it to unlock mutex if it's a lock.","title":"Copying RAII objects"},{"location":"TheVault/C%2B%2B%20learning/Effective%20C%2B%2B/Effective%20C%2B%2B%20Chapter%203/#new-new-delete-delete","text":"What does new do? 1. allocate memory 2. call one or more constructors If you have something like this: std::string* strings = new std::string[100]; Constructor of std::string will be called 100 times! Therefore you cannot use delete , that'll only delete one element (the first one). Instead, use delete[]. Always have new and delete matched. If there's a [] in new expression, use delete[]!!!","title":"new, new[], delete, delete[]"},{"location":"TheVault/Job/Untitled%20Kanban/","text":"To Apply Applied Screening Test Interview Rejected %% kanban:settings {\"kanban-plugin\":\"board\",\"list-collapse\":[false,false,false,false,false,false]} %%","title":"Untitled Kanban"},{"location":"TheVault/Job/Untitled%20Kanban/#to-apply","text":"","title":"To Apply"},{"location":"TheVault/Job/Untitled%20Kanban/#applied","text":"","title":"Applied"},{"location":"TheVault/Job/Untitled%20Kanban/#screening","text":"","title":"Screening"},{"location":"TheVault/Job/Untitled%20Kanban/#test","text":"","title":"Test"},{"location":"TheVault/Job/Untitled%20Kanban/#interview","text":"","title":"Interview"},{"location":"TheVault/Job/Untitled%20Kanban/#rejected","text":"%% kanban:settings {\"kanban-plugin\":\"board\",\"list-collapse\":[false,false,false,false,false,false]} %%","title":"Rejected"},{"location":"TheVault/Unreal%20Engine/Project%20Setup/","text":"\u9700\u8981\u4e0b\u8f7d\uff1a P4V (\u6709\u7ba1\u7406\u6743\u9650\u9700\u6c42\u53ef\u53e6\u5916\u4e0b\u8f7dP4Admin\uff09 UE 5.5 Visual Studio 2022 (\u6216\u5176\u4ed6\u7248\u672c) \u9700\u9009\u62e9\u5b89\u88c5: Desktop development with C++ Game development with C++ .NET desktop development Universal Windows Platform development \u5177\u4f53\u7248\u672c&\u63a8\u8350\u914d\u7f6e\u53c2\u7167 \u8fd9\u91cc Perforce \u6b65\u9aa4 \u8fd0\u884cP4V \u9700\u8981\u586b\u5199\uff1a Server: ec2-35-179-105-89.eu-west-2.compute.amazonaws.com:1666 User: damien, hailin, vesper, zico, art(doro\u548c\u63d0\u7eb2\u5171\u7528)\uff0c\u5bc6\u7801\u5747\u4e3apassword\uff0c\u90ae\u7bb1\u4e0e\u7528\u6237\u540d\u76f8\u540c![[Pasted image 20250303194352.png]] Workspace\u9009\u62e9New\uff0c\u7ed9\u4f60\u7684Workspace\u8d77\u4e2a\u540d\uff0cWorkspace root\u9009\u62e9\u4f60\u8981\u5de5\u4f5c\u7684\u672c\u5730\u6587\u4ef6\u76ee\u5f55\uff1bStream\u9009\u62e9main![[Pasted image 20250305145853.png]] \u8fdb\u5165\u540e\u53f3\u952e\u6839\u76ee\u5f55\u9009\u62e9Get Latest Revision ![[Pasted image 20250305151447.png]] UE project setup \u6253\u5f00RoadTrip.uproject\u3002\u7b2c\u4e00\u6b21\u6253\u5f00\u9700\u8981build\uff0c\u63d0\u524d\u5b89\u88c5\u597dvisual studio ![[Pasted image 20250305213106.png]] \u6210\u529f\u6253\u5f00\u540e\u9700\u5728\u5f15\u64ce\u5185connect version control\u3002\u7f16\u8f91\u5668\u53f3\u4e0b\u89d2\u9009\u62e9Revision Control -> Connect to Revision Control -> Provider\u9009\u62e9Perforce, \u586b\u5199 ec2-35-179-105-89.eu-west-2.compute.amazonaws.com:1666 \u548c\u7528\u6237\u540d\u5373\u53ef![[Pasted image 20250305213645.png]] \u5b8c\u6210\u540e\u663e\u793a\u7eff\u8272\u5bf9\u94a9\u5373\u4e3a\u6210\u529f ![[Pasted image 20250305214434.png]]","title":"Project Setup"},{"location":"TheVault/Unreal%20Engine/Project%20Setup/#_1","text":"P4V (\u6709\u7ba1\u7406\u6743\u9650\u9700\u6c42\u53ef\u53e6\u5916\u4e0b\u8f7dP4Admin\uff09 UE 5.5 Visual Studio 2022 (\u6216\u5176\u4ed6\u7248\u672c) \u9700\u9009\u62e9\u5b89\u88c5: Desktop development with C++ Game development with C++ .NET desktop development Universal Windows Platform development \u5177\u4f53\u7248\u672c&\u63a8\u8350\u914d\u7f6e\u53c2\u7167 \u8fd9\u91cc","title":"\u9700\u8981\u4e0b\u8f7d\uff1a"},{"location":"TheVault/Unreal%20Engine/Project%20Setup/#perforce","text":"\u8fd0\u884cP4V \u9700\u8981\u586b\u5199\uff1a Server: ec2-35-179-105-89.eu-west-2.compute.amazonaws.com:1666 User: damien, hailin, vesper, zico, art(doro\u548c\u63d0\u7eb2\u5171\u7528)\uff0c\u5bc6\u7801\u5747\u4e3apassword\uff0c\u90ae\u7bb1\u4e0e\u7528\u6237\u540d\u76f8\u540c![[Pasted image 20250303194352.png]] Workspace\u9009\u62e9New\uff0c\u7ed9\u4f60\u7684Workspace\u8d77\u4e2a\u540d\uff0cWorkspace root\u9009\u62e9\u4f60\u8981\u5de5\u4f5c\u7684\u672c\u5730\u6587\u4ef6\u76ee\u5f55\uff1bStream\u9009\u62e9main![[Pasted image 20250305145853.png]] \u8fdb\u5165\u540e\u53f3\u952e\u6839\u76ee\u5f55\u9009\u62e9Get Latest Revision ![[Pasted image 20250305151447.png]]","title":"Perforce \u6b65\u9aa4"},{"location":"TheVault/Unreal%20Engine/Project%20Setup/#ue-project-setup","text":"\u6253\u5f00RoadTrip.uproject\u3002\u7b2c\u4e00\u6b21\u6253\u5f00\u9700\u8981build\uff0c\u63d0\u524d\u5b89\u88c5\u597dvisual studio ![[Pasted image 20250305213106.png]] \u6210\u529f\u6253\u5f00\u540e\u9700\u5728\u5f15\u64ce\u5185connect version control\u3002\u7f16\u8f91\u5668\u53f3\u4e0b\u89d2\u9009\u62e9Revision Control -> Connect to Revision Control -> Provider\u9009\u62e9Perforce, \u586b\u5199 ec2-35-179-105-89.eu-west-2.compute.amazonaws.com:1666 \u548c\u7528\u6237\u540d\u5373\u53ef![[Pasted image 20250305213645.png]] \u5b8c\u6210\u540e\u663e\u793a\u7eff\u8272\u5bf9\u94a9\u5373\u4e3a\u6210\u529f ![[Pasted image 20250305214434.png]]","title":"UE project setup"},{"location":"TheVault/Unreal%20Engine/Version%20Control%20with%20UE%20%28WIP%29/","text":"Options 1. Git Pros: 1. Easy to use, team already familiar with it Cons: 1. Doesn't support locking 2. Not supported well with UE 3. Difficulty handle large files 2. Git LFS 3. Perforce 4. SVN","title":"Version Control with UE (WIP)"},{"location":"TheVault/Unreal%20Engine/Version%20Control%20with%20UE%20%28WIP%29/#options","text":"","title":"Options"},{"location":"TheVault/Unreal%20Engine/Version%20Control%20with%20UE%20%28WIP%29/#1-git","text":"Pros: 1. Easy to use, team already familiar with it Cons: 1. Doesn't support locking 2. Not supported well with UE 3. Difficulty handle large files","title":"1. Git"},{"location":"TheVault/Unreal%20Engine/Version%20Control%20with%20UE%20%28WIP%29/#2-git-lfs","text":"","title":"2. Git LFS"},{"location":"TheVault/Unreal%20Engine/Version%20Control%20with%20UE%20%28WIP%29/#3-perforce","text":"","title":"3. Perforce"},{"location":"TheVault/Unreal%20Engine/Version%20Control%20with%20UE%20%28WIP%29/#4-svn","text":"","title":"4. SVN"}]}